#!/usr/bin/env zsh

setopt ERREXIT
autoload -U colors && colors

if [[ $# -eq 0 ]]; then
  echo "Usage"
fi

command=$1

function run {
  if [[ $# -eq 0 ]]; then
    echo "Nope!" # TODO: Fix this message.
    exit -1
  fi
  local environment=$1
  shift
  source $environment.env
  ./$environment.run $@
}

function list {
  for file in $(find . -iname '*.env'); do
    local description=$(source $file && echo $RUN_DESCRIPTION)
    local file=${file%.*}
    file=${file:2}
    file=${file}
    if [[ -z $description ]]; then
      echo $file
    else
      echo "$file - $description"
    fi
  done
}

function encrypt {
  local password="$(cat propass)"
  local infile
  for infile in $(find . -iname '*.env'); do
    local encfile="${infile}.encrypted"
    local checksum=$(shasum -a 256 $infile | cut -d' ' -f1)
    local checkfile="${infile}.checksum"
    if ! [[ -f $encfile ]] || ! [[ -f $checkfile ]] || [[ $(cat $checkfile) != $checksum ]]; then 
      openssl enc -aes-256-cbc -pbkdf2 -salt -in $infile -out $encfile -pass pass:"$password" 
    fi
    echo $checksum > $checkfile
  done
}

function decrypt {
  local password="$(cat propass)"
  local infile
  for infile in $(find . -iname '*.env.encrypted'); do
    local outfile="${infile%.encrypted}"
    openssl enc -d -aes-256-cbc -pbkdf2 -salt -in $infile -out $outfile -pass pass:"$password" 
  done
}

function install {
  local source=$1;
  local target=$2;
  if ! [[ -d $target ]]; then
    echo "Install target must exist and must be a directory." >&2;
    exit -1;
  fi
  local executable=${source:t}
  target=$target/$executable
  if [[ -f $target ]] && [[ $(realpath $source) = $(realpath $target)  ]]; then
    echo "Executable is already in place." >&2;
    exit -1;
  fi
  cp -fv $source $target;
}

function update {
  local repo=prosumma/hs-prosumma
  local tag=$1
  local yamlfile=${2:-stack.yaml}
  if [[ $tag = -- ]]; then
    unset tag
  fi
  if ! [[ -f $yamlfile ]]; then
    echo "No stack.yaml file to edit. Quitting." >&2
    exit 1
  fi
  repo=$(yq e ".extra-deps[] | select(.git | test(\"(?i)$repo\")) | .git" $yamlfile) 
  if [[ -z $repo ]]; then
    echo "Repository $repo not found in $yamlfile." >&2
    exit 1
  fi
  if [[ -z $tag ]]; then
    tag=$(git ls-remote $repo | cut -f2 | grep '^refs\/tags\/' | egrep -o '[0-9]+(\.[0-9]+)+$' | grep -v '^$' | sort -V | tail -n 1)
    if [[ -z $tag ]]; then
      echo "No tag specified or found. Quitting." >&2
      exit 1
    fi
  fi
  local commit=$(git ls-remote $repo $tag | cut -f1)
  yq e --inplace "(.extra-deps[] | select(.git == \"$repo\") | .commit) = \"$commit\"" $yamlfile 
  echo "Updated $repo to $tag ($commit) in $yamlfile."
}

function version() {
  local repo=prosumma/hs-prosumma
  local yamlfile=${1:-stack.yaml}
  if ! [[ -f $yamlfile ]]; then
    echo "No stack.yaml file to examine. Quitting." >&2
    exit 1
  fi
  commit=$(yq e ".extra-deps[] | select(.git | test(\"(?i)$repo\")) | .commit" $yamlfile)
  if [[ -z $commit ]]; then
    echo "No commit found. Quitting." >&2
    exit 1
  fi
  repo=$(yq e ".extra-deps[] | select(.git | test(\"(?i)$repo\")) | .git" $yamlfile)
  if [[ -z $repo ]]; then
    echo "Repository URL not found. Quitting." >&2
    exit 1
  fi
  git ls-remote --tags $repo | grep $commit | egrep -o '[0-9]+(\.[0-9]+)+$' 
}

case $command in
  :list)
    list
    ;;
  :encrypt)
    encrypt
    ;;
  :decrypt)
    decrypt
    ;;
  :update)
    shift
    update "$@"
    ;;
  :version)
    shift
    version "$@"
    ;;
  :install)
    shift
    install $0 ${1:-$HOME/bin}
    ;;
  :*)
    echo "Unknown command ${bold_color}$command{$reset_color}. Exiting." >&2
    exit -1
    ;;
  *)
    run $@
    ;;
esac